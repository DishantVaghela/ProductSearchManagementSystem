package Service;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;

import Dao.UpdateManagerDao;

/**
 * Servlet implementation class UpdateManagerService
 */
@WebServlet("/UpdateManagerService")
public class UpdateManagerService extends HttpServlet {
	private static final long serialVersionUID = 1L;
	
	// location to store file uploaded
    private static final String UPLOAD_DIRECTORY = "general";
 
    // upload settings
    private static final int MEMORY_THRESHOLD   = 1024 * 1024 * 3;  // 3MB
    private static final int MAX_FILE_SIZE      = 1024 * 1024 * 40; // 40MB
    private static final int MAX_REQUEST_SIZE   = 1024 * 1024 * 50; // 50MB
    
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public UpdateManagerService() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//doGet(request, response);
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		
		// configures upload settings
        DiskFileItemFactory factory = new DiskFileItemFactory();
        // sets memory threshold - beyond which files are stored in disk
        factory.setSizeThreshold(MEMORY_THRESHOLD);
        // sets temporary location to store files
        factory.setRepository(new File(System.getProperty("java.io.tmpdir")));
 
        ServletFileUpload upload = new ServletFileUpload(factory);
         
        // sets maximum size of upload file
        upload.setFileSizeMax(MAX_FILE_SIZE);
         
        // sets maximum size of request (include file + form data)
        upload.setSizeMax(MAX_REQUEST_SIZE);
 
        // constructs the directory path to store upload file
        // this path is relative to application's directory
        String uploadPath = "D:\\sts workspace csa\\ProductSearchManagementSystem\\WebContent"
                + File.separator + UPLOAD_DIRECTORY;
         
        // creates the directory if it does not exist
        File uploadDir = new File(uploadPath);
        if (!uploadDir.exists()) {
            uploadDir.mkdir();
        }
        
        try{
	        // parses the request's content to extract file data
	        //@SuppressWarnings("unchecked")
	        List<FileItem> formItems = upload.parseRequest(request);
	        // Process the uploaded items
	        Iterator<FileItem> iter = formItems.iterator();
	       
	        String buttonClicked = ((FileItem) iter.next()).getString();
	        
	        String password = ((FileItem) iter.next()).getString();
	        String recoveryQuestion = ((FileItem) iter.next()).getString();
	        String recoveryAnswer = ((FileItem) iter.next()).getString();
	       
	        FileItem item = iter.next();
	        try{
	        	if (!item.isFormField() && buttonClicked.equals("buttonUpdate") && item.getSize()>0) {
			        String fileName = "manager.png";
		            String filePath = uploadPath + File.separator + fileName;
		            File storeFile = new File(filePath);
		            // saves the file on disk
		            item.write(storeFile);
	        	}
	        }
	        catch(Exception e){
				
			}  	
		
			if(UpdateManagerDao.updateManager(password, recoveryQuestion, recoveryAnswer)){  
				out.println("<script type=\"text/javascript\">");
				out.println("alert('manager updated');");
				out.println("location='updateManager.jsp';");
				out.println("</script>");
			}  
		    else{  
		    	out.println("<script type=\"text/javascript\">");
		    	out.println("alert('failed to update manager');");
		    	out.println("location='updateManager.jsp';");
			    out.println("</script>");
		    }
        }
		out.close();
        
	}

}
